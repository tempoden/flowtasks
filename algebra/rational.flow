import math/math;
import string;

export {
    Rational(num: int, den: int);

    multRationals(l: Rational, r: Rational) -> Rational;  
    divRationals(l: Rational, r: Rational) -> Rational;  
    sumRationals(l: Rational, r: Rational) -> Rational;
    subRationals(l: Rational, r: Rational) -> Rational;
    
    r2s(e: Rational) -> string;
}




multRationals(l: Rational, r: Rational) -> Rational{
    cdiv = gcd(l.num * r.num, l.den * r.den);
    Rational((l.num * r.num)/cdiv, (l.den * r.den)/cdiv);
}

divRationals(l: Rational, r: Rational) -> Rational{
    cdiv = gcd(l.num * r.den, l.den * r.num);
    Rational((l.num * r.den)/cdiv, (l.den * r.num)/cdiv);
}

sumRationals(l: Rational, r: Rational) -> Rational{
    if(l.den == r.den){
        Rational(l.num + r.num, l.den);
    } else {
        cdiv = gcd(l.num * r.den + r.num * l.den, l.den * r.den);
        Rational((l.num * r.den + r.num * l.den)/cdiv, (l.den * r.den)/cdiv);
    }
}

subRationals(l: Rational, r: Rational) -> Rational{
    if(l.den == r.den){
        Rational(l.num - r.num, l.den);
    } else {
        cdiv = gcd(l.num * r.den - r.num * l.den, l.den * r.den);
        Rational((l.num * r.den - r.num * l.den)/cdiv, (l.den * r.den)/cdiv);
    }
}

r2s(e:Rational) -> string{
    if (e.den == 1){
        i2s(e.num);
    } else {
        concatStrings([i2s(e.num), "/", i2s(e.den)]);
    }
}