import arexp;
import ds/tree;
import rational;

export {
    Polynom(sum: Tree<PolyProd, int>);
    PolyProd(prod: Tree<string, int>);
    RationalFunction(num: Polynom, den: Polynom);

    alg2rf(e: ArExp) -> RationalFunction;

    sumRationalFunctions(l: RationalFunction, r: RationalFunction) -> RationalFunction;
    subRationalFunctions(l: RationalFunction, r: RationalFunction) -> RationalFunction;
    multRationalFunctions(l: RationalFunction, r: RationalFunction) -> RationalFunction;
    divRationalFunctions(l: RationalFunction, r: RationalFunction) -> RationalFunction;
    minusRationalFunction(rf: RationalFunction) -> RationalFunction;

    sumPolynoms(l: Polynom, r: Polynom) -> Polynom;
    multPolynoms(l: Polynom, r: Polynom) -> Polynom;
    minusPolynom(p: Polynom) -> Polynom;

    multPolyProds(l: PolyProd, r: PolyProd) -> PolyProd;

    p2s(p: Polynom) -> string;
    pp2s(pp: PolyProd) -> string;
    rf2s(rf: RationalFunction) -> string;
}

alg2rf(e: ArExp) -> RationalFunction{
    rf = switch (e) {
        SumExp(l,r): sumRationalFunctions(alg2rf(l) , alg2rf(r));
        MultExp(l,r): multRationalFunctions(alg2rf(l), alg2rf(r));
        SubExp(l,r): subRationalFunctions(alg2rf(l), alg2rf(r));
        DivExp(l,r): divRationalFunctions(alg2rf(l), alg2rf(r));
        MinusExp(expr): minusRationalFunction(alg2rf(expr));
        IntExp(v): RationalFunction(
            Polynom(setTree(makeTree(), PolyProd(makeTree()), v)),
            Polynom(setTree(makeTree(), PolyProd(makeTree()), 1))
        );
        VarExp(name): RationalFunction(
            Polynom(setTree(makeTree(), PolyProd(setTreeValues(makeTree(),[Pair(name, 1)])), 1)),
            Polynom(setTree(makeTree(), PolyProd(makeTree()), 1))
        );
    }
    rf2 = RationalFunction(filterPolynom(rf.num), filterPolynom(rf.den));
    polyGCD = gcd(coefGCD(rf2.num), coefGCD(rf2.den));
    rf3 = divRationalFunctionByInt(rf2, polyGCD);
    numGCD = coefGCD(rf3.num);
    rf3_num = divPolynomByInt(rf3.num, numGCD);
    if(rf3_num == rf3.den){
        RationalFunction(
            Polynom(setTree(makeTree(), PolyProd(makeTree()), numGCD)),
            Polynom(setTree(makeTree(), PolyProd(makeTree()), 1))
        );
    }else{
        rf3;
    }
}

filterPolynom(p: Polynom) -> Polynom{
    Polynom(filterTree(p.sum, \k,v -> v!=0));
}

coefGCD(p: Polynom)->int{
    initial = getTreeValues(p.sum)[0];
    foldTree(p.sum, initial, \k,v,acc -> gcd(acc,v));
}

divPolynomByInt(p: Polynom, c: int) -> Polynom{
    Polynom(mapTree(p.sum, \v -> v/c ));
}

divRationalFunctionByInt(rf: RationalFunction, c: int) -> RationalFunction{
    RationalFunction(divPolynomByInt(rf.num, c), divPolynomByInt(rf.den, c));
}

sumRationalFunctions(l: RationalFunction, r: RationalFunction) -> RationalFunction{
    RationalFunction(sumPolynoms(multPolynoms(l.num, r.den), multPolynoms(r.num, l.den)), 
                     multPolynoms(l.den, r.den));
}

subRationalFunctions(l: RationalFunction, r: RationalFunction) -> RationalFunction{
    RationalFunction(sumPolynoms(multPolynoms(l.num, r.den), minusPolynom(multPolynoms(r.num, l.den))), 
                     multPolynoms(l.den, r.den))
}

multRationalFunctions(l: RationalFunction, r: RationalFunction) -> RationalFunction{
    RationalFunction(multPolynoms(l.num, r.num), multPolynoms(l.den, r.den));
}

divRationalFunctions(l: RationalFunction, r: RationalFunction) -> RationalFunction{
    RationalFunction(multPolynoms(l.num, r.den), multPolynoms(l.den, r.num));
}

minusRationalFunction(rf: RationalFunction) -> RationalFunction{
    RationalFunction(minusPolynom(rf.num), rf.den);
}


minusPolynom(p: Polynom) -> Polynom{
    Polynom(mapTree(p.sum, \r -> -r));
}

/*ar2p(e: ArExp) -> Polynom{
    switch (e) {
        SumExp(l, r):
            sumPolynoms(ar2p(l), ar2p(r));
        MultExp(l, r):
            multPolynoms(ar2p(l), ar2s(r));
        IntExp(val):
            Polynom(setTree(makeTree(), PolyProd(makeTree()), Rational(val,1)));
        VarExp(var):
            Polynom(setTree(makeTree(), PolyProd(setTreeValues(makeTree(),[Pair(var, 1)])), Rational(1,1)));
        default
    }
}*/

multPolyProds(l: PolyProd, r: PolyProd) -> PolyProd{
    /*PolyProd(foldTree(l.prod, makeTree(), \lv,lp,acc -> {
            foldTree(r.prod, acc,\rv, rp, ac -> {
                    switch(lookupTree(l.prod, rv)){
                        Some(v): if(lv == rv){
                            setTree(ac, lv,lp + rp);
                        } else {
                            switch(lookupTree(r.prod, lv)){
                                Some(vt): ac;
                                None(): setTree(ac, lv, lp);
                            }
                        };
                        None(): setTree(ac, rv, rp);
                    }                    
                }
            )
        }
    ))*/
    PolyProd(mergeTreeCustom(l.prod, r.prod, \k, lv, rv -> rv + lv));
}

sumPolynoms(l: Polynom, r: Polynom){
    Polynom(mergeTreeCustom(l.sum, r.sum, \k, lv, rv -> lv + rv));
}

multPolynoms(l: Polynom, r: Polynom){
    Polynom(foldTree(l.sum, makeTree(), \lp, lc,acc -> {
        foldTree(r.sum, acc, \rp, rc, ac -> {
            pp = multPolyProds(lp, rp);
            switch(lookupTree(ac, pp)){
                Some(coef): setTree(ac, pp, coef + (lc * rc));
                None(): setTree(ac, pp, (lc * rc));
            }     
        })
    }))
}

p2s (e: Polynom) -> string{
    trim2(concatStrings(foldTree(e.sum, [], \k,v,acc -> concat(acc, [i2s(v) + pp2s(k) + " + "]))), " +")
}

pp2s (e: PolyProd) -> string{
    concatStrings(foldTree(e.prod , [], \k,v,acc -> concat(acc, [k + "^" + i2s(v)])))
}

rf2s(rf: RationalFunction) -> string{
    if(rf.den ==  Polynom(setTree(makeTree(), PolyProd(makeTree()), 1))){
        p2s(rf.num);
    } else {
        concatStrings(["{", p2s(rf.num) ,"} / {", p2s(rf.den) ,"}"]);
    }
}
